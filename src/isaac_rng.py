import re

VALID_SEED_CHARS = "ABCDEFGHJKLMNPQRSTWXYZ01234V6789"

RNG_OFFSETS = [
    0x00000001,
    0x00000005,
    0x00000010,
    0x00000001,
    0x00000005,
    0x00000013,
    0x00000001,
    0x00000009,
    0x0000001D,
    0x00000001,
    0x0000000B,
    0x00000006,
    0x00000001,
    0x0000000B,
    0x00000010,
    0x00000001,
    0x00000013,
    0x00000003,
    0x00000001,
    0x00000015,
    0x00000014,
    0x00000001,
    0x0000001B,
    0x0000001B,
    0x00000002,
    0x00000005,
    0x0000000F,
    0x00000002,
    0x00000005,
    0x00000015,
    0x00000002,
    0x00000007,
    0x00000007,
    0x00000002,
    0x00000007,
    0x00000009,
    0x00000002,
    0x00000007,
    0x00000019,
    0x00000002,
    0x00000009,
    0x0000000F,
    0x00000002,
    0x0000000F,
    0x00000011,
    0x00000002,
    0x0000000F,
    0x00000019,
    0x00000002,
    0x00000015,
    0x00000009,
    0x00000003,
    0x00000001,
    0x0000000E,
    0x00000003,
    0x00000003,
    0x0000001A,
    0x00000003,
    0x00000003,
    0x0000001C,
    0x00000003,
    0x00000003,
    0x0000001D,
    0x00000003,
    0x00000005,
    0x00000014,
    0x00000003,
    0x00000005,
    0x00000016,
    0x00000003,
    0x00000005,
    0x00000019,
    0x00000003,
    0x00000007,
    0x0000001D,
    0x00000003,
    0x0000000D,
    0x00000007,
    0x00000003,
    0x00000017,
    0x00000019,
    0x00000003,
    0x00000019,
    0x00000018,
    0x00000003,
    0x0000001B,
    0x0000000B,
    0x00000004,
    0x00000003,
    0x00000011,
    0x00000004,
    0x00000003,
    0x0000001B,
    0x00000004,
    0x00000005,
    0x0000000F,
    0x00000005,
    0x00000003,
    0x00000015,
    0x00000005,
    0x00000007,
    0x00000016,
    0x00000005,
    0x00000009,
    0x00000007,
    0x00000005,
    0x00000009,
    0x0000001C,
    0x00000005,
    0x00000009,
    0x0000001F,
    0x00000005,
    0x0000000D,
    0x00000006,
    0x00000005,
    0x0000000F,
    0x00000011,
    0x00000005,
    0x00000011,
    0x0000000D,
    0x00000005,
    0x00000015,
    0x0000000C,
    0x00000005,
    0x0000001B,
    0x00000008,
    0x00000005,
    0x0000001B,
    0x00000015,
    0x00000005,
    0x0000001B,
    0x00000019,
    0x00000005,
    0x0000001B,
    0x0000001C,
    0x00000006,
    0x00000001,
    0x0000000B,
    0x00000006,
    0x00000003,
    0x00000011,
    0x00000006,
    0x00000011,
    0x00000009,
    0x00000006,
    0x00000015,
    0x00000007,
    0x00000006,
    0x00000015,
    0x0000000D,
    0x00000007,
    0x00000001,
    0x00000009,
    0x00000007,
    0x00000001,
    0x00000012,
    0x00000007,
    0x00000001,
    0x00000019,
    0x00000007,
    0x0000000D,
    0x00000019,
    0x00000007,
    0x00000011,
    0x00000015,
    0x00000007,
    0x00000019,
    0x0000000C,
    0x00000007,
    0x00000019,
    0x00000014,
    0x00000008,
    0x00000007,
    0x00000017,
    0x00000008,
    0x00000009,
    0x00000017,
    0x00000009,
    0x00000005,
    0x0000000E,
    0x00000009,
    0x00000005,
    0x00000019,
    0x00000009,
    0x0000000B,
    0x00000013,
    0x00000009,
    0x00000015,
    0x00000010,
    0x0000000A,
    0x00000009,
    0x00000015,
    0x0000000A,
    0x00000009,
    0x00000019,
    0x0000000B,
    0x00000007,
    0x0000000C,
    0x0000000B,
    0x00000007,
    0x00000010,
    0x0000000B,
    0x00000011,
    0x0000000D,
    0x0000000B,
    0x00000015,
    0x0000000D,
    0x0000000C,
    0x00000009,
    0x00000017,
    0x0000000D,
    0x00000003,
    0x00000011,
    0x0000000D,
    0x00000003,
    0x0000001B,
    0x0000000D,
    0x00000005,
    0x00000013,
    0x0000000D,
    0x00000011,
    0x0000000F,
    0x0000000E,
    0x00000001,
    0x0000000F,
    0x0000000E,
    0x0000000D,
    0x0000000F,
    0x0000000F,
    0x00000001,
    0x0000001D,
    0x00000011,
    0x0000000F,
    0x00000014,
    0x00000011,
    0x0000000F,
    0x00000017,
    0x00000011,
    0x0000000F,
    0x0000001A,
]


def rng_next(num: int, offset_id: int) -> int:
    offset_a = RNG_OFFSETS[offset_id * 3]
    offset_b = RNG_OFFSETS[offset_id * 3 + 1]
    offset_c = RNG_OFFSETS[offset_id * 3 + 2]
    num = num ^ ((num >> offset_a) & 0xFFFFFFFF)
    num = num ^ ((num << offset_b) & 0xFFFFFFFF)
    num = num ^ ((num >> offset_c) & 0xFFFFFFFF)
    return num


def string_to_seed(seed: str):
    if len(seed) == 9 and seed[4] == " ":
        seed = re.sub(" ", "", seed)

    seed = seed.upper()

    assert len(seed) == 8

    char_to_int = {VALID_SEED_CHARS[i]: i for i in range(len(VALID_SEED_CHARS))}
    num_seed = []
    for char in seed:
        assert char in VALID_SEED_CHARS
        num_seed.append(char_to_int[char.upper()])

    v8 = 0
    v10 = 0
    j = (
        (num_seed[6] >> 3)
        | (
            4
            * (
                num_seed[5]
                | (
                    32
                    * (
                        num_seed[4]
                        | (
                            32
                            * (
                                num_seed[3]
                                | (
                                    32
                                    * (
                                        num_seed[2]
                                        | (32 * (num_seed[1] | (32 * num_seed[0])))
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    ) ^ 0xFEF7FFD

    while j != 0:
        v10 = ((j & 0xFF) + v8) & 0xFF
        j >>= 5
        v8 = ((v10 >> 7) + 2 * v10) & 0xFF

    assert v8 == (num_seed[7] | (0xFF & (32 * num_seed[6])))
    return (
        (num_seed[6] >> 3)
        | (
            4
            * (
                num_seed[5]
                | (
                    32
                    * (
                        num_seed[4]
                        | (
                            32
                            * (
                                num_seed[3]
                                | (
                                    32
                                    * (
                                        num_seed[2]
                                        | (32 * (num_seed[1] | (32 * num_seed[0])))
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    ) ^ 0xFEF7FFD

